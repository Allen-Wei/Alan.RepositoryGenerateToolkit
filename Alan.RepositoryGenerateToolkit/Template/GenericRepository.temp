using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using @Model.Model.ModelNamespace;

namespace @Model.Repository.RepositoryNamespace
{
    public partial class @Model.Repository.GenericRepositoryName<T> : @(Model.Repository.IRepositoryNamespace).@Model.Repository.GenericIRepositoryName<T> where T : class
    {
        public @(Model.Model.ContextNamespace).@Model.Model.ContextName Context { get; private set; }

        private T Entity { get; set; }

        public @Model.Repository.GenericRepositoryName ()
        {
            this.Context = new @(Model.Model.ContextName)();
            this.Entity = default(T);
        }

        public @Model.Repository.GenericRepositoryName (@Model.Model.ContextName  context)
        {
            this.Context = context;
            this.Entity = default(T);
        }

        public Table<T> GetTable()
        {
            return this.Context.GetTable<T>();
        }

        /// <summary>
        /// 开启状态跟踪(关闭可以提高查询效率,但无法更新)
        /// </summary>
        /// <param name="enable"></param>
        public void EnableTrack(bool enable)
        {
            this.Context.ObjectTrackingEnabled = enable;
        }
        public void Save()
        {
            this.Context.SubmitChanges();
        }

        public IQueryable<T> AsQuerable()
        {
            return this.GetTable();
        }

        public IQueryable<T> FindAll()
        {
            return this.AsQuerable();
        }


        public T FindOne<TSort>(Expression<Func<T, TSort>> order, Expression<Func<T, bool>> condition)
        {
            return this.QueryDescending(condition, order).FirstOrDefault();
        }

        public T FindOne<TSort>(string order, string condition, object[] parameters)
        {
            return this.Query(condition, order, parameters).FirstOrDefault();
        }

        public T FindOne(string condition, object[] parameters)
        {
            return this.Query(condition, parameters).FirstOrDefault();
        }

        public T FindOne(Expression<Func<T, bool>> condition)
        {
            return this.AsQuerable().FirstOrDefault(condition);
        }

        #region Delete
        public bool Delete(T entity)
        {
            if (entity == null) return false;
            this.GetTable().DeleteOnSubmit(entity);
            return true;
        }

        public bool Delete(Expression<Func<T, bool>> condition)
        {
            var entity = this.FindOne(condition);
            if (entity == null) return false;
            return this.Delete(entity);
        }

        public bool DeleteMulti(Expression<Func<T, bool>> condition)
        {
            var entities = this.Query(condition);
            return this.DeleteMulti(entities);
        }

        public bool DeleteMulti(IQueryable<T> entities)
        {
            foreach (var entity in entities)
            {
                this.Delete(entity);
            }
            return true;
        }

        public bool Delete(string condition, object[] parameters)
        {
            var entity = this.FindOne(condition, parameters);
            if (entity == null) return false;
            return this.Delete(entity);
        }

        public bool DeleteMulti(string condition, object[] parameters)
        {
            var entities = this.Query(condition, parameters);
            return this.DeleteMulti(entities);
        }
        #endregion


        public T Insert(T entity)
        {
            this.GetTable().InsertOnSubmit(entity);
            return entity;
        }

        public IEnumerable<T> InsertMulti(IEnumerable<T> entities)
        {
            this.GetTable().InsertAllOnSubmit(entities);
            return entities;
        }

        #region 需要单独实现

        public bool Update(Expression<Func<T, bool>> filter, T entity)
        {
            var query = this.FindOne(filter);
            if (query == null) return false;
            this.Update(entity, query);
            this.Save();
            return true;
        }
        public bool Update(T entity)
        {
            throw new NotImplementedException();
        }

        public void Update(T from, T to)
        {
            //Bug 借助ValueInject赋值实现
            throw new NotImplementedException();
        }

        public Tuple<bool, string> IsValid(T entity)
        {
            return Tuple.Create(true, "");
        }

        public Tuple<bool, string> IsValidByRuleEngine(T entity, Action<RulesEngine.ForClass<T>> callback = null)
        {
            if (entity == null) return Tuple.Create(false, typeof(T).Name + " 实体不能为空");

            var engine = new RulesEngine.Engine();
            var forClass = engine.For<T>();

            if (callback != null) callback(forClass);   //在这里添加规则

            var report = new RulesEngine.ValidationReport(engine);

            var isPassed = report.Validate(entity);
            var messages = String.Join("|", report.GetErrorMessages());

            return Tuple.Create(isPassed, messages);
        }

        public bool IsRepeat(T entity)
        {
            return false;
        }
        #endregion

        #region LINQ Query
        public IQueryable<T> Query(Expression<Func<T, bool>> filter)
        {
            return this.AsQuerable().Where(filter);
        }

        public IQueryable<T> Query<TKey>(Expression<Func<T, bool>> filter, Expression<Func<T, TKey>> order)
        {
            return this.Query(filter).OrderBy(order);
        }

        public IQueryable<T> Query(Expression<Func<T, bool>> filter, string order)
        {
            return this.Query(filter).OrderBy(order);
        }

        public IQueryable<T> QueryDescending<TKey>(Expression<Func<T, bool>> filter, Expression<Func<T, TKey>> order)
        {
            return this.Query(filter).OrderByDescending(order);
        }
        public IQueryable<T> Query(Expression<Func<T, bool>> filter, string order, int skip, int take)
        {
            return this.Query(filter, order).Skip(skip).Take(take);
        }

        public IQueryable<T> Query<TKey>(Expression<Func<T, bool>> filter, Expression<Func<T, TKey>> order, int skip, int take)
        {
            return this.Query(filter).OrderBy(order).Skip(skip).Take(take);
        }
        public IQueryable<T> QueryDescending<TKey>(Expression<Func<T, bool>> filter, Expression<Func<T, TKey>> order, int skip, int take)
        {
            return this.Query(filter).OrderByDescending(order).Skip(skip).Take(take);
        }

        #endregion


        #region Dynamic Query
        public IQueryable<T> Query(string filter, object[] parameters)
        {
            return this.AsQuerable().Where(filter, parameters);
        }



        public IQueryable<T> Query(string filter, string order, object[] parameters = null)
        {
            return this.Query(filter, parameters).OrderBy(order);

        }



        public IQueryable<T> Query(string filter, Expression<Func<T, bool>> whereClause, string order,
            object[] parameters = null)
        {
            return this.Query(filter, order, parameters).Where(whereClause);
        }

        public IQueryable<T> Query(string filter, string order, int skip, int take, object[] parameters = null)
        {
            return this.Query(filter, order, parameters).Skip(skip).Take(take).OrderBy(order);
        }

        public IQueryable<T> Query(string filter, Expression<Func<T, bool>> whereClause, string order, int skip, int take,
            object[] parameters = null)
        {
            return this.Query(filter, whereClause, order, parameters).Skip(skip).Take(take);
        }



        #endregion


        #region Utils
        public bool IsExist(Expression<Func<T, bool>> condition)
        {
            return this.AsQuerable().Any(condition);
        }

        public long TotalRecords(Expression<Func<T, bool>> filter)
        {
            return this.AsQuerable().Where(filter).LongCount();
        }

        public long TotalRecords(string filter, object[] parameters)
        {
            return this.AsQuerable().Where(filter, parameters).LongCount();
        }

        public long TotalRecords(string filter, Expression<Func<T, bool>> whereClause, object[] parameters)
        {
            return this.AsQuerable().Where(filter, parameters).Where(whereClause).LongCount();
        }

        public int? MaxId(Expression<Func<T, bool>> filter, Expression<Func<T, int?>> column)
        {
            return this.Query(filter).Max(column);
        }
        public int? MaxId(Expression<Func<T, int?>> column)
        {
            return this.AsQuerable().Max(column);
        }

        #endregion
    }
}
